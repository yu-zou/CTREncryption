// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _block_aes_128_HH_
#define _block_aes_128_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "proc_block.h"
#include "key_expansion.h"
#include "block_aes_128_sub_key_V.h"

namespace ap_rtl {

struct block_aes_128 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > IV_V;
    sc_in< sc_lv<128> > key_V;
    sc_in< sc_logic > init;
    sc_out< sc_lv<512> > ap_return;


    // Module declarations
    block_aes_128(sc_module_name name);
    SC_HAS_PROCESS(block_aes_128);

    ~block_aes_128();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    block_aes_128_sub_key_V* sub_key_V_U;
    proc_block* grp_proc_block_fu_56;
    key_expansion* grp_key_expansion_fu_65;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > sub_key_V_address0;
    sc_signal< sc_logic > sub_key_V_ce0;
    sc_signal< sc_logic > sub_key_V_we0;
    sc_signal< sc_lv<128> > sub_key_V_q0;
    sc_signal< sc_lv<1> > init_read_read_fu_28_p2;
    sc_signal< sc_logic > grp_proc_block_fu_56_ap_start;
    sc_signal< sc_logic > grp_proc_block_fu_56_ap_done;
    sc_signal< sc_logic > grp_proc_block_fu_56_ap_idle;
    sc_signal< sc_logic > grp_proc_block_fu_56_ap_ready;
    sc_signal< sc_lv<4> > grp_proc_block_fu_56_sub_key_V_address0;
    sc_signal< sc_logic > grp_proc_block_fu_56_sub_key_V_ce0;
    sc_signal< sc_lv<512> > grp_proc_block_fu_56_ap_return;
    sc_signal< sc_logic > grp_key_expansion_fu_65_ap_start;
    sc_signal< sc_logic > grp_key_expansion_fu_65_ap_done;
    sc_signal< sc_logic > grp_key_expansion_fu_65_ap_idle;
    sc_signal< sc_logic > grp_key_expansion_fu_65_ap_ready;
    sc_signal< sc_lv<4> > grp_key_expansion_fu_65_sub_key_V_2_address0;
    sc_signal< sc_logic > grp_key_expansion_fu_65_sub_key_V_2_ce0;
    sc_signal< sc_logic > grp_key_expansion_fu_65_sub_key_V_2_we0;
    sc_signal< sc_lv<128> > grp_key_expansion_fu_65_sub_key_V_2_d0;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_logic > grp_proc_block_fu_56_ap_start_reg;
    sc_signal< sc_logic > grp_key_expansion_fu_65_ap_start_reg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_key_expansion_fu_65_ap_start();
    void thread_grp_proc_block_fu_56_ap_start();
    void thread_init_read_read_fu_28_p2();
    void thread_sub_key_V_address0();
    void thread_sub_key_V_ce0();
    void thread_sub_key_V_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
