-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_aes_128 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IV_V : IN STD_LOGIC_VECTOR (127 downto 0);
    key_V : IN STD_LOGIC_VECTOR (127 downto 0);
    init : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of block_aes_128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "block_aes_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.091000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2217,HLS_SYN_LUT=188270,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_key_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_key_V_ce0 : STD_LOGIC;
    signal sub_key_V_we0 : STD_LOGIC;
    signal sub_key_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal init_read_read_fu_28_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_proc_block_fu_56_ap_start : STD_LOGIC;
    signal grp_proc_block_fu_56_ap_done : STD_LOGIC;
    signal grp_proc_block_fu_56_ap_idle : STD_LOGIC;
    signal grp_proc_block_fu_56_ap_ready : STD_LOGIC;
    signal grp_proc_block_fu_56_sub_key_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_proc_block_fu_56_sub_key_V_ce0 : STD_LOGIC;
    signal grp_proc_block_fu_56_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_key_expansion_fu_65_ap_start : STD_LOGIC;
    signal grp_key_expansion_fu_65_ap_done : STD_LOGIC;
    signal grp_key_expansion_fu_65_ap_idle : STD_LOGIC;
    signal grp_key_expansion_fu_65_ap_ready : STD_LOGIC;
    signal grp_key_expansion_fu_65_sub_key_V_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_key_expansion_fu_65_sub_key_V_2_ce0 : STD_LOGIC;
    signal grp_key_expansion_fu_65_sub_key_V_2_we0 : STD_LOGIC;
    signal grp_key_expansion_fu_65_sub_key_V_2_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_proc_block_fu_56_ap_start_reg : STD_LOGIC := '0';
    signal grp_key_expansion_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component proc_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (127 downto 0);
        sub_key_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sub_key_V_ce0 : OUT STD_LOGIC;
        sub_key_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component key_expansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_V : IN STD_LOGIC_VECTOR (127 downto 0);
        sub_key_V_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sub_key_V_2_ce0 : OUT STD_LOGIC;
        sub_key_V_2_we0 : OUT STD_LOGIC;
        sub_key_V_2_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        sub_key_V_2_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component block_aes_128_sub_key_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    sub_key_V_U : component block_aes_128_sub_key_V
    generic map (
        DataWidth => 128,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sub_key_V_address0,
        ce0 => sub_key_V_ce0,
        we0 => sub_key_V_we0,
        d0 => grp_key_expansion_fu_65_sub_key_V_2_d0,
        q0 => sub_key_V_q0);

    grp_proc_block_fu_56 : component proc_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_proc_block_fu_56_ap_start,
        ap_done => grp_proc_block_fu_56_ap_done,
        ap_idle => grp_proc_block_fu_56_ap_idle,
        ap_ready => grp_proc_block_fu_56_ap_ready,
        in_V => IV_V,
        sub_key_V_address0 => grp_proc_block_fu_56_sub_key_V_address0,
        sub_key_V_ce0 => grp_proc_block_fu_56_sub_key_V_ce0,
        sub_key_V_q0 => sub_key_V_q0,
        ap_return => grp_proc_block_fu_56_ap_return);

    grp_key_expansion_fu_65 : component key_expansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_key_expansion_fu_65_ap_start,
        ap_done => grp_key_expansion_fu_65_ap_done,
        ap_idle => grp_key_expansion_fu_65_ap_idle,
        ap_ready => grp_key_expansion_fu_65_ap_ready,
        key_V => key_V,
        sub_key_V_2_address0 => grp_key_expansion_fu_65_sub_key_V_2_address0,
        sub_key_V_2_ce0 => grp_key_expansion_fu_65_sub_key_V_2_ce0,
        sub_key_V_2_we0 => grp_key_expansion_fu_65_sub_key_V_2_we0,
        sub_key_V_2_d0 => grp_key_expansion_fu_65_sub_key_V_2_d0,
        sub_key_V_2_q0 => sub_key_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_key_expansion_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_key_expansion_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (init_read_read_fu_28_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_key_expansion_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_key_expansion_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_key_expansion_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_proc_block_fu_56_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_proc_block_fu_56_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (init_read_read_fu_28_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_proc_block_fu_56_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_proc_block_fu_56_ap_ready = ap_const_logic_1)) then 
                    grp_proc_block_fu_56_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(init_read_read_fu_28_p2, grp_proc_block_fu_56_ap_done, grp_key_expansion_fu_65_ap_done)
    begin
                ap_block_state2_on_subcall_done <= (((init_read_read_fu_28_p2 = ap_const_lv1_1) and (grp_key_expansion_fu_65_ap_done = ap_const_logic_0)) or ((init_read_read_fu_28_p2 = ap_const_lv1_0) and (grp_proc_block_fu_56_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_proc_block_fu_56_ap_return;
    grp_key_expansion_fu_65_ap_start <= grp_key_expansion_fu_65_ap_start_reg;
    grp_proc_block_fu_56_ap_start <= grp_proc_block_fu_56_ap_start_reg;
    init_read_read_fu_28_p2 <= (0=>init, others=>'-');

    sub_key_V_address0_assign_proc : process(init_read_read_fu_28_p2, grp_proc_block_fu_56_sub_key_V_address0, grp_key_expansion_fu_65_sub_key_V_2_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((init_read_read_fu_28_p2 = ap_const_lv1_1)) then 
                sub_key_V_address0 <= grp_key_expansion_fu_65_sub_key_V_2_address0;
            elsif ((init_read_read_fu_28_p2 = ap_const_lv1_0)) then 
                sub_key_V_address0 <= grp_proc_block_fu_56_sub_key_V_address0;
            else 
                sub_key_V_address0 <= "XXXX";
            end if;
        else 
            sub_key_V_address0 <= "XXXX";
        end if; 
    end process;


    sub_key_V_ce0_assign_proc : process(init_read_read_fu_28_p2, grp_proc_block_fu_56_sub_key_V_ce0, grp_key_expansion_fu_65_sub_key_V_2_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((init_read_read_fu_28_p2 = ap_const_lv1_1)) then 
                sub_key_V_ce0 <= grp_key_expansion_fu_65_sub_key_V_2_ce0;
            elsif ((init_read_read_fu_28_p2 = ap_const_lv1_0)) then 
                sub_key_V_ce0 <= grp_proc_block_fu_56_sub_key_V_ce0;
            else 
                sub_key_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            sub_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sub_key_V_we0_assign_proc : process(init_read_read_fu_28_p2, grp_key_expansion_fu_65_sub_key_V_2_we0, ap_CS_fsm_state2)
    begin
        if (((init_read_read_fu_28_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sub_key_V_we0 <= grp_key_expansion_fu_65_sub_key_V_2_we0;
        else 
            sub_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
