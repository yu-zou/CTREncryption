// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="block_aes_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.091000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2217,HLS_SYN_LUT=188270,HLS_VERSION=2018_3}" *)

module block_aes_128 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IV_V,
        key_V,
        init,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] IV_V;
input  [127:0] key_V;
input   init;
output  [511:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] sub_key_V_address0;
reg    sub_key_V_ce0;
reg    sub_key_V_we0;
wire   [127:0] sub_key_V_q0;
wire   [0:0] init_read_read_fu_28_p2;
wire    grp_proc_block_fu_56_ap_start;
wire    grp_proc_block_fu_56_ap_done;
wire    grp_proc_block_fu_56_ap_idle;
wire    grp_proc_block_fu_56_ap_ready;
wire   [3:0] grp_proc_block_fu_56_sub_key_V_address0;
wire    grp_proc_block_fu_56_sub_key_V_ce0;
wire   [511:0] grp_proc_block_fu_56_ap_return;
wire    grp_key_expansion_fu_65_ap_start;
wire    grp_key_expansion_fu_65_ap_done;
wire    grp_key_expansion_fu_65_ap_idle;
wire    grp_key_expansion_fu_65_ap_ready;
wire   [3:0] grp_key_expansion_fu_65_sub_key_V_2_address0;
wire    grp_key_expansion_fu_65_sub_key_V_2_ce0;
wire    grp_key_expansion_fu_65_sub_key_V_2_we0;
wire   [127:0] grp_key_expansion_fu_65_sub_key_V_2_d0;
wire    ap_CS_fsm_state2;
reg    ap_block_state2_on_subcall_done;
reg    grp_proc_block_fu_56_ap_start_reg;
reg    grp_key_expansion_fu_65_ap_start_reg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_proc_block_fu_56_ap_start_reg = 1'b0;
#0 grp_key_expansion_fu_65_ap_start_reg = 1'b0;
end

block_aes_128_sub_key_V #(
    .DataWidth( 128 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
sub_key_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sub_key_V_address0),
    .ce0(sub_key_V_ce0),
    .we0(sub_key_V_we0),
    .d0(grp_key_expansion_fu_65_sub_key_V_2_d0),
    .q0(sub_key_V_q0)
);

proc_block grp_proc_block_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_proc_block_fu_56_ap_start),
    .ap_done(grp_proc_block_fu_56_ap_done),
    .ap_idle(grp_proc_block_fu_56_ap_idle),
    .ap_ready(grp_proc_block_fu_56_ap_ready),
    .in_V(IV_V),
    .sub_key_V_address0(grp_proc_block_fu_56_sub_key_V_address0),
    .sub_key_V_ce0(grp_proc_block_fu_56_sub_key_V_ce0),
    .sub_key_V_q0(sub_key_V_q0),
    .ap_return(grp_proc_block_fu_56_ap_return)
);

key_expansion grp_key_expansion_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_key_expansion_fu_65_ap_start),
    .ap_done(grp_key_expansion_fu_65_ap_done),
    .ap_idle(grp_key_expansion_fu_65_ap_idle),
    .ap_ready(grp_key_expansion_fu_65_ap_ready),
    .key_V(key_V),
    .sub_key_V_2_address0(grp_key_expansion_fu_65_sub_key_V_2_address0),
    .sub_key_V_2_ce0(grp_key_expansion_fu_65_sub_key_V_2_ce0),
    .sub_key_V_2_we0(grp_key_expansion_fu_65_sub_key_V_2_we0),
    .sub_key_V_2_d0(grp_key_expansion_fu_65_sub_key_V_2_d0),
    .sub_key_V_2_q0(sub_key_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_key_expansion_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (init_read_read_fu_28_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_key_expansion_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_key_expansion_fu_65_ap_ready == 1'b1)) begin
            grp_key_expansion_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_proc_block_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (init_read_read_fu_28_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_proc_block_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_proc_block_fu_56_ap_ready == 1'b1)) begin
            grp_proc_block_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((init_read_read_fu_28_p2 == 1'd1)) begin
            sub_key_V_address0 = grp_key_expansion_fu_65_sub_key_V_2_address0;
        end else if ((init_read_read_fu_28_p2 == 1'd0)) begin
            sub_key_V_address0 = grp_proc_block_fu_56_sub_key_V_address0;
        end else begin
            sub_key_V_address0 = 'bx;
        end
    end else begin
        sub_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((init_read_read_fu_28_p2 == 1'd1)) begin
            sub_key_V_ce0 = grp_key_expansion_fu_65_sub_key_V_2_ce0;
        end else if ((init_read_read_fu_28_p2 == 1'd0)) begin
            sub_key_V_ce0 = grp_proc_block_fu_56_sub_key_V_ce0;
        end else begin
            sub_key_V_ce0 = 1'b0;
        end
    end else begin
        sub_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((init_read_read_fu_28_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_key_V_we0 = grp_key_expansion_fu_65_sub_key_V_2_we0;
    end else begin
        sub_key_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = (((init_read_read_fu_28_p2 == 1'd1) & (grp_key_expansion_fu_65_ap_done == 1'b0)) | ((init_read_read_fu_28_p2 == 1'd0) & (grp_proc_block_fu_56_ap_done == 1'b0)));
end

assign ap_return = grp_proc_block_fu_56_ap_return;

assign grp_key_expansion_fu_65_ap_start = grp_key_expansion_fu_65_ap_start_reg;

assign grp_proc_block_fu_56_ap_start = grp_proc_block_fu_56_ap_start_reg;

assign init_read_read_fu_28_p2 = init;

endmodule //block_aes_128
